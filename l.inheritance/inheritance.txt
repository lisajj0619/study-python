상속
    1. 기존에 선언된 클래스의 필드를, 새롭게 만들 클래스의 필드로 사용하고자 할 때
    2. 여러 클래스를 선언하면서, 겹치는 필드가 있을 경우 부모 클래스를 선언한 뒤
       겹치는 필드를 구성하고 각 자식 클래스에 상속해준다(추상화).

상속 문법
    class A:
        A 필드

    class B(A):
        A, B 필드

    A: 부모 클래스, 상위 클래스, 슈퍼 클래스, 기반 클래스
    B: 자식 클래스, 하위 클래스, 서브 클래스, 파생 클래스

super().__init__(): 부모 생성자
    자식 클래스 타입의 객체로 부모 필드에 접근할 수 있다.
    하지만 자식 생성자만 호출하기 때문에, 자식 필드만 메모리에 할당된다고 생각할 수 있다.
    사실, 자식 생성자에는 항상 부모 생성자를 호출하기 때문에 자식 생성자 호출 시 부모와 사직 필드 모두 메모리에 할당된다.
    이 때 부모 생성자를 호출하는 방법은 super().__init__() (self는 자동전달)를 사용하는 것이다.
    만약, super().__init__()을 직접 작성하지 않더라도 컴파일러가 자동으로 작성해준다.

오버라이딩(재정의, 무시하기)
    부모 필드에서 선언한 메소드를 자식 필드에서 수정하고자 할 때 재정의를 해야한다.
    이는 자식에서 부모필드의 메소드와 동일한 이름으로 선언하는 문법을 의미한다.
    접근한 객체와 가까운 곳 부터 찾기 때문에, 자식 필드에 해당 메소드가 있다면 재정의된 메소드가 실행된다.

[종합 실습]
은행
   예금주
   계좌번호(중복 없음)
   핸드폰번호(중복 없음)
   비밀번호
   통장잔고

신한
   입금 시 수수료 50%
국민
   출금 시 수수료 50%
카카오
   잔액조회 재산 반토막

은행은 3개를 선언한다.
모든 은행 고객을 관리하는 DB를 2차원 list로 선언한다.
모든 은행은 출금, 입금, 잔액조회, 계좌개설, 계좌번호 중복검사, 로그인, 핸드폰 번호 중복검사 서비스가 있다.
화면쪽 메뉴는 "계좌개설, 입금하기, 출금하기, 잔액조회, 계좌번호 찾기(새로운 계좌 설정, 핸드폰 번호로 서비스 이용가능), 나가기"로 구성되어 있다.

    bank_menu = "1. 신한 은행\n" \
                "2. 국민 은행\n" \
                "3. 카카오 뱅크\n" \
                "4. 나가기\n"

    menu = "1. 개설\n" \
           "2. 입금\n" \
           "3. 출금\n" \
           "4. 잔액\n" \
           "5. 은행 선택 메뉴로 돌아가기\n"

    owner_message = "예금주: "
    account_number_message = "계좌번호: "
    phone_message = "핸드폰 번호: "
    password_message = "비밀번호(4자리): "
    money_message = "예치금: "
    deposit_message = "입금액: "
    withdraw_message = "출금액: "
    error_message = "다시 시도해주세요"